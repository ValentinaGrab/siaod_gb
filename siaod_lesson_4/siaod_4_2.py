"""Написать два алгоритма нахождения i-го по счёту простого числа. Функция нахождения простого числа должна принимать на вход натуральное и возвращать соответствующее простое число. Проанализировать скорость и сложность алгоритмов.
- Первый — с помощью алгоритма «Решето Эратосфена».
Примечание. Алгоритм «Решето Эратосфена» разбирался на одном из прошлых уроков. Используйте этот код и попробуйте его улучшить/оптимизировать под задачу.
- Второй — без использования «Решета Эратосфена».
Примечание. Вспомните классический способ проверки числа на простоту."""
import timeit
import matplotlib.pyplot as plt
import numpy as np

def get_primes_eratosfena(n,item):
    # «Решето Эратосфена»
    is_prime = [True] * (n + 1)
    is_prime[0], is_prime[1] = False, False
    for i in range(n + 1):
        if is_prime[i]:
            for j in range(i ** 2, n + 1, i):
                is_prime[j] = False
    primes = [1]
    for i in range(n + 1):
        if is_prime[i]:
            primes.append(i)
    return primes[item-1]

def get_primes_simple(n, item):
    # Поиск простых чисел перебором
    is_prime = []
    for i in range(1, n):
        count = 0
        for j in range(2, i-1):
            if i % j == 0:
                count += 1
        if count == 0:
            is_prime.append(i)
    return is_prime[item-1]

v1, v2 = [],[]
with open('result_4_2.txt', 'w', encoding='utf-8') as f:
    f.write(f'size,  erastofen, simple\n')
    for size in range(200, 4000, 200):
#        print(size)
        primes_e = timeit.timeit('get_primes_eratosfena(size, 6)', number=100, globals=globals())
        v1.append(primes_e)
        primes_s = timeit.timeit('get_primes_simple(size, 6)', number=100, globals=globals())
        f.write(f'{size},{primes_e},{primes_s}\n')
        v2.append(primes_s)
plt.plot(v1)
plt.plot(v2)
plt.show()

print("finished")
#Асимптотика второй варианта похожа на квадратичную n**2
#Асимптотика Решето Ерастофена похожа на линейнеую O(n)

"""size,  erastofen, simple
200,0.005134284000000003,0.11095016499999999
400,0.01057614300000001,0.375553402
600,0.013713360000000008,0.845415059
800,0.01799283499999982,1.52037944
1000,0.022458222999999666,2.485864753
1200,0.02681173100000045,3.642790594
1400,0.031121882000000767,5.072719032
1600,0.03556958999999971,6.727015731999998
1800,0.040148030000001,10.102307401000001
2000,0.04788376299999797,15.961171942
2200,0.05007368300000081,15.132588105000004
2400,0.08300391499999904,18.637513297000005
2600,0.06483608400000662,21.967270888
2800,0.06812285600000223,24.13082961100001
3000,0.06812377200000697,30.50673297499999
3200,0.0765091229999939,32.155730309999996
3400,0.07967906999999741,35.10174659699999
3600,0.08637223499999891,38.700407255000016
3800,0.0834547140000268,42.73955247699996"""

